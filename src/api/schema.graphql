type Board {
	assam_x: Int!
	assam_y: Int!
	assam_dir: Int!
	width: Int!
	height: Int!
	grid: [[Int]]
	dir_grid: [[Int]]
	top_carpets: [Carpet]
	primary_diagonal_loop: Boolean!
}

input BoardInput {
	assam_x: Int!
	assam_y: Int!
	assam_dir: Int!
	width: Int!
	height: Int!
	grid: [[Int]]
	dir_grid: [[Int]]
	top_carpets: [CarpetInput]
	primary_diagonal_loop: Boolean!
}

type Carpet {
	x: Int!
	y: Int!
	isVertical: Boolean!
	color: Int!
}

input CarpetInput {
	x: Int!
	y: Int!
	isVertical: Boolean!
	color: Int!
}

type Marrakech {
	id: ID!
	modified: AWSDateTime!
	players: [Player]
	totalPlayers: Int
	board: Board!
	lobby: Boolean!
	turnInfo: TurnInfo
}

type Mutation {
	createGame(
		board: BoardInput!,
		players: [PlayerInput!]!,
		lobby: Boolean!,
		playercount: Int!
	): Marrakech
	updateGame(
		id: ID!,
		modified: AWSDateTime!,
		players: [PlayerInput!]!,
		board: BoardInput!,
		turnInfo: TurnInfoInput
	): Marrakech
}

type Player {
	id: ID
	name: String
	deck: [Int!]!
	dirhams: Int!
}

input PlayerInput {
	id: ID
	name: String
	deck: [Int!]!
	dirhams: Int!
}

type Query {
	getGame(id: ID!): Marrakech
	listLobby: [Marrakech]!
}

type TurnInfo {
	turn: Int
	last_rolled: Int
	next_action: Int
	next_player: Int
}

input TurnInfoInput {
	turn: Int
	last_rolled: Int
	next_action: Int
	next_player: Int
}